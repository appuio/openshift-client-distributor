apiVersion: v1
kind: Template
parameters:
  - name: "NAME"
    value: openshift-client-distributor
  - name: "HOSTNAME"
    required: true
  - name: "NAMESPACE"
    required: true
metadata:
  name: openshift-client-distributor
  annotations:
    description: "openshift-client-distributor"
    tags: "openshift-client-distributor"
objects:
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    namespace: "${NAMESPACE}"
    labels:
      app: "${NAME}"
    name: openshift-client-distributor
  spec:
    selector:
      matchLabels:
        app: "${NAME}"
        deploymentconfig: openshift-client-distributor
    template:
      metadata:
        annotations:
          alpha.image.policy.openshift.io/resolve-names: '*'
        labels:
          app: "${NAME}"
          deploymentconfig: openshift-client-distributor
      spec:
        containers:
        - image: rhel8/python-36:latest
          command: [ "/opt/app-root/bin/python", "/tmp/script/app.py"]
          imagePullPolicy: Always
          name: openshift-client-distributor
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/script/
            name: python-webserver
          - mountPath: /tmp/js/
            name: cli-download-customization
          - mountPath: /usr/share/atomic-openshift
            name: atomic-openshift
          - mountPath: /usr/share/origin
            name: origin
        dnsPolicy: ClusterFirst
        nodeSelector:
          node-role.kubernetes.io/master: "true"
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: openshift-client-distributor
        serviceAccountName: openshift-client-distributor
        terminationGracePeriodSeconds: 30
        volumes:
        - name: python-webserver
          configMap:
            defaultMode: 0755
            name: python-webserver
        - name: cli-download-customization
          configMap:
            name: cli-download-customization
        - hostPath:
            path: /usr/share/atomic-openshift
            type: ""
          name: atomic-openshift
        - hostPath:
            path: /usr/share/origin
            type: ""
          name: origin
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 0
    desiredNumberScheduled: 0
    numberMisscheduled: 0
    numberReady: 0

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    namespace: "${NAMESPACE}"
    annotations:
    labels:
      app: "${NAME}"
    name: openshift-client-distributor
  spec:
    host: "${HOSTNAME}"
    port:
      targetPort: 8080-tcp
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: openshift-client-distributor
      weight: 100
    wildcardPolicy: None
  status:
    ingress: null

- apiVersion: v1
  kind: Service
  metadata:
    namespace: "${NAMESPACE}"
    annotations:
    labels:
      app: "${NAME}"
    name: openshift-client-distributor
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: "${NAME}"
      deploymentconfig: openshift-client-distributor
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: openshift-client-distributor
    namespace: "${NAMESPACE}"

- apiVersion: v1
  data:
    cli-download-customization.js: |+
      'use strict';
      window.OPENSHIFT_CONSTANTS.CLI = {
        "Linux":    "https://${HOSTNAME}/linux/oc",
        "Windows":  "https://${HOSTNAME}/windows/oc.exe",
        "Mac OS X": "https://${HOSTNAME}/macosx/oc"
      };
  kind: ConfigMap
  metadata:
    namespace: "${NAMESPACE}"
    name: cli-download-customization

- apiVersion: v1
  data:
    app.py: |
      import os
      import http.server
      import socketserver
  
      PORT = 8080
      CLIENT_DIRS = [  # Directories to publish, covering different OpenShift versions
          "/usr/share/atomic-openshift/linux",
          "/usr/share/atomic-openshift/macosx",
          "/usr/share/atomic-openshift/windows",
          "/usr/share/origin/linux",
          "/usr/share/origin/macosx",
          "/usr/share/origin/windows",
          "/tmp/js/cli-download-customization.js"]
      TARGET_ROOT = "/tmp/clients"
  
      os.makedirs(TARGET_ROOT, exist_ok=True)
      for source_dir in CLIENT_DIRS:
          target_dir = os.path.join(TARGET_ROOT, os.path.basename(source_dir))
          if os.path.exists(source_dir) and not os.path.exists(target_dir):
              os.symlink(source_dir, target_dir)
  
      os.chdir(TARGET_ROOT)
  
      Handler = http.server.SimpleHTTPRequestHandler
      socketserver.TCPServer.allow_reuse_address = True
      with socketserver.TCPServer(("", PORT), Handler) as httpd:
          print("Serving at port", PORT)
          httpd.serve_forever()
  kind: ConfigMap
  metadata:
    namespace: "${NAMESPACE}"
    name: python-webserver